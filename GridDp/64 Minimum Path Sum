class Solution {
public:
    
    int solve(vector<vector<int>> &grid , int i , int j , vector<vector<int>> &dp){ 
        if(i==0 and j==0) return grid[i][j];
        if(i < 0 or j < 0) return 1e9;
        if(dp[i][j]!=-1) return dp[i][j];
        return dp[i][j] = min(grid[i][j] + solve(grid,i-1,j,dp) , grid[i][j] + solve(grid,i,j-1,dp));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
      //  vector<vector<int>> dp(n , vector<int> (m,-1));
       // return solve(grid,n-1,m-1,dp);
         vector<vector<int>> dp(n , vector<int> (m,0));
        
     /*   for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(i==0 and j==0) dp[i][j] = grid[i][j];
                else if(i-1>=0 and j-1>=0) dp[i][j] = min(grid[i][j] + dp[i-1][j] , grid[i][j] + dp[i][j-1]);
                else if(i-1>=0) dp[i][j] = grid[i][j] + dp[i-1][j];
                else if(j-1>=0) dp[i][j] = grid[i][j] + dp[i][j-1];
            }
        }
        
        return dp[n-1][m-1]; */
        
        vector<int> prev_row(m , 0);
          for(int i = 0 ; i < n ; i++){
              vector<int> curr_row(m,0);
            for(int j = 0 ; j < m ; j++){
                if(i==0 and j==0) curr_row[j] = grid[i][j];
                else if(i-1>=0 and j-1>=0) curr_row[j] = min(grid[i][j] + prev_row[j] , grid[i][j] + curr_row[j-1]);
                else if(i-1>=0) curr_row[j] = grid[i][j] + prev_row[j];
                else if(j-1>=0) curr_row[j] = grid[i][j] + curr_row[j-1];
            }
              
              prev_row = curr_row;
        }
        
        return prev_row[m-1];
        
    }
};
