/*  
    recursion tc -> 3 power (n) where n is the number of rows
    sc -> o(n) recursive stack space
    memo tc -> o(n*m)
    sc -> o(n*m) + o(n)
    tab tc -> o(n*m)
    sc ->  o(n*m)
    space o tc -> o(n*m)
    sc -> o(n)
*/
class Solution {
public:
    
    int solve(int i , int j , vector<vector<int>> &matrix , vector<vector<int>> &dp){
        
        if(j < 0 or j >= matrix.size()) return 1e9;
        if(i==matrix.size()-1) return matrix[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        return dp[i][j] = min({matrix[i][j] + solve(i+1,j-1,matrix,dp), matrix[i][j] + solve(i+1,j,matrix,dp) , matrix[i][j] + solve(i+1,j+1,matrix,dp)});
    }
    
    int minFallingPathSum(vector<vector<int>>& matrix) {
       int ans = INT_MAX;
        //vector<vector<int>> dp(matrix.size() , vector<int> (matrix[0].size() , -1)); 
      /*  for(int i = 0 ; i < matrix.size() ; i++){
            //ans = min(ans , solve(0,i,matrix,dp));
        } 
        */
        /* vector<vector<int>> dp(matrix.size() , vector<int> (matrix[0].size() , 0));
        for(int j = 0 ; j < matrix.size() ; j++) dp[matrix.size()-1][j] = matrix[matrix.size()-1][j];
        for(int i = matrix.size()-2 ; i >= 0 ; i--){
            for(int j = 0 ; j < matrix.size() ; j++){
                if(j-1 >= 0 and j+1 <= matrix.size()-1) dp[i][j] = min({matrix[i][j] + dp[i+1][j-1], matrix[i][j] + dp[i+1][j] , matrix[i][j] + dp[i+1][j+1]});
                
                else if(j-1 >=0){
                    dp[i][j] = min(matrix[i][j] + dp[i+1][j-1] , matrix[i][j] + dp[i+1][j]);
                }
                else if(j+1 <= matrix.size()-1){
                      dp[i][j] = min(matrix[i][j] + dp[i+1][j+1] , matrix[i][j] + dp[i+1][j]);
                }
            }
        }
        
        for(int j = 0 ; j < matrix.size() ; j++){
            ans = min(ans , dp[0][j]);
        } */ 
        
        vector<int> next_row(matrix.size(),0);
        
        for(int j = 0 ; j < matrix.size() ; j++) next_row[j] = matrix[matrix.size()-1][j];
        
        
        
                for(int i = matrix.size()-2 ; i >= 0 ; i--){
                    
                vector<int> curr_row(matrix.size(),0);
                    
                for(int j = 0 ; j < matrix.size() ; j++){
            
                    
                if(j-1 >= 0 and j+1 <= matrix.size()-1) curr_row[j] = min({matrix[i][j] + next_row[j-1], matrix[i][j] + next_row[j] , matrix[i][j] + next_row[j+1]});
                
                else if(j-1 >=0){
                    curr_row[j] = min(matrix[i][j] + next_row[j-1] , matrix[i][j] + next_row[j]);
                }
                else if(j+1 <= matrix.size()-1){
                      curr_row[j] = min(matrix[i][j] + next_row[j+1] , matrix[i][j] + next_row[j]);
                }
            }
                    
                    next_row = curr_row;
        }
        
          for(int j = 0 ; j < next_row.size() ; j++){
            ans = min(ans , next_row[j]);
        }
        
        
        return ans;
    }
};
