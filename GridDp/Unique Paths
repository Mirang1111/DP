
/*

       recursion tc -> for every box there are two paths so -> 2 power(m*n)
       sc -> path length (m-1) + (n-1)
       
       memo tc -> o(m*n)
       sc -> o(m-1) + o(n-1) -> path length + o(m*n) -> dp array
       
       tabulation tc -> o(m*n)
       sc -> o(m*n) (reduced the recursive stack space)
       
       space optimization tc -> o(m*n)
       sc -> o(n)

*/
class Solution {
public:
    
    int solve(int  i , int j , vector<vector<int>> &dp){
        
        if(i==0 and j==0) return 1;
        if(i < 0 or j < 0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
     return dp[i][j] =  solve(i-1,j,dp) + solve(i,j-1,dp);   
    }
    int uniquePaths(int m, int n) {
        //vector<vector<int>> dp(m , vector<int> (n , -1));
        
        //return solve(m-1,n-1,dp);
        
   /*     vector<vector<int>> dp(m , vector<int> (n , 0));
        dp[0][0] = 1;
        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(i-1>=0 and j-1>=0){
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
                else if(i-1>=0) dp[i][j] = dp[i-1][j];
                else if(j-1>=0) dp[i][j] = dp[i][j-1];
            }
        }
        return dp[m-1][n-1]; */
        
        // space optimization 
        vector<int> prev_row(n,0);
        for(int i = 0 ; i < m ; i++){
            vector<int> curr_row(n,0);
            for(int j = 0 ; j < n ; j++){
                if(i==0 and j==0) curr_row[j] = 1;
                else if(i-1>=0 and j-1>=0) curr_row[j] = prev_row[j] + curr_row[j-1];
                else if(i-1>=0) curr_row[j] = prev_row[j];
                else if(j-1>=0) curr_row[j] = curr_row[j-1];
            }   
            prev_row = curr_row;
        }
        return prev_row[n-1]; 
    }
};
