/*
tc and sc same as unique paths 
*/

class Solution {
public:
    
    int solve(vector<vector<int>> &og , int i , int j , vector<vector<int>> &dp){
        if(i < 0 or j < 0 or og[i][j]==1) return 0;
        if(i==0 and j==0) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        return dp[i][j] = solve(og,i-1,j,dp) + solve(og,i,j-1,dp);
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int n = og.size();
        int m = og[0].size();
       // vector<vector<int>> dp(n , vector<int> (m , -1));
       //eturn solve(og,n-1,m-1,dp);
    /*    vector<vector<int>> dp(n , vector<int> (m , 0));
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(og[i][j]==1) dp[i][j] = 0;
                else if(i==0 and j==0) dp[i][j] = 1;
                else if(i-1 >=0 and j-1>=0) dp[i][j] = dp[i-1][j] + dp[i][j-1];
                else if(i-1>=0) dp[i][j] = dp[i-1][j];
                else if(j-1>=0) dp[i][j] = dp[i][j-1];
            }
        }
        return dp[n-1][m-1];
        */
        
        vector<int> prev_row(m,0);
          for(int i = 0 ; i < n ; i++){
              vector<int> curr_row(m,0);
            for(int j = 0 ; j < m ; j++){
                if(og[i][j]==1) curr_row[j] = 0;
                else if(i==0 and j==0) curr_row[j] = 1;
                else if(i-1 >=0 and j-1>=0) curr_row[j] = prev_row[j] + curr_row[j-1];
                else if(i-1>=0) curr_row[j] = prev_row[j];
                else if(j-1>=0) curr_row[j] = curr_row[j-1];
            }     
              prev_row = curr_row;
        }
        return prev_row[m-1];
        
        
    }
};
