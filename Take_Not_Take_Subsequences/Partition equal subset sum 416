https://leetcode.com/problems/partition-equal-subset-sum/
class Solution {
public:
    /* 
    tc ->
    same as subset sum 
    */
    bool subsetsum(int index , int sum , vector<int> &arr ,  vector<vector<int>> &dp){
          if(sum==0) return true;
        if(index==0) return arr[index]==sum;
        if(dp[index][sum]!=-1) return dp[index][sum];
        bool take = false;
        bool ntake = false;
        // only take when it is possible to take
        if(arr[index] <= sum) take = subsetsum(index-1,sum-arr[index],arr,dp);
        // we can always not take and move forward
        ntake = subsetsum(index-1,sum,arr,dp);
        return dp[index][sum] =  take or ntake;
    }
    bool canPartition(vector<int>& nums) {
        // if sum is odd then answer is 0
        int sum = 0;
        int n  = nums.size();
        for(int i  = 0 ; i < n ; i++){
            sum+=nums[i];
        }
        if(sum%2!=0) return false;
        else { // check whether it is possible to make sum/2 , if yes , then return true
            vector<vector<int>> dp(n , vector<int> (sum/2 + 1 , -1));
            return subsetsum(nums.size()-1,sum/2,nums,dp);
        }
        return true;
    }
};
