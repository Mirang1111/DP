
https://practice.geeksforgeeks.org/problems/perfect-sum-problem5633/1


/*
    brute -> generate all subsequences and check for the answer
    recursion -> tc -> 2 power n -> for each element -> take / not take
    sc -> o(N) -> auxiliary stack space
    
    dp[i][target] -> in the entire array till the index i , does there exists any target
    
    memo tc -> o(N*target)
    sc -> o(N*target) + o(N)
    
    tab tc -> o(N*target)
    sc -> o(N*target)
    
    space o tc ->o(N*target)
    sc ->  o(target)
*/


class Solution{

	public:
	const int m=1e9+7;
	int solve(int arr[], int n, int sum,vector<vector<int>>& dp){
	    if(sum==0)return 1;
	    if(n==0)return(arr[0]==sum);
	    if(dp[n][sum]!=-1)return dp[n][sum];
	    
	    int nottake=solve(arr,n-1,sum,dp);
	    
	    int take=0;
	    if(arr[n]<=sum)take=solve(arr,n-1,sum-arr[n],dp);
	    
	    return dp[n][sum]=(take+nottake)%m;
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        vector<vector<int>> dp(n,vector<int>(sum+1,-1));
        sort(arr, arr + n, greater<int>());
        return solve(arr,n-1,sum,dp);
	}
	  
};
