class Solution {
public:
    /*
      tc and sc -> similar to longest common subsequence
    */
    typedef double ll;
    int solve(string a , string b , int i , int j , vector<vector<int>> &dp){
     if(j < 0) return 1;
     // this means j is not less than zero and i is less than zero which means matching not done
     if(i < 0 ) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        int take = 0;
        int ntake = 0;
        if(a[i]==b[j]){
            take = solve(a,b,i-1,j-1,dp) + solve(a,b,i-1,j,dp);
        }
        else{
            ntake = solve(a,b,i-1,j,dp);
        }
        
        return dp[i][j] =  take + ntake;
        
    }   
    int numDistinct(string s, string t) {
        ll n = s.length();
        ll m = t.length();
     //   vector<vector<int>> dp(n , vector<int> (m , -1));
     //   return solve(s,t,s.length()-1,t.length()-1,dp);
        
      //   vector<vector<ll>> dp(n+1 , vector<ll> (m+1 ,0));
        vector<ll> prev(m+1,0);
        vector<ll> curr(m+1,0);
        prev[0] = 1;
        curr[0] = 1; // this line is very imp
        for(ll j = 1 ; j <= m ; j++) prev[j] = 0;
        for(ll i = 0 ; i <= n ; i++) prev[0] = 1;
        
        for(ll i = 1 ; i <= n ; i++){
  
            for(ll j = 1 ; j <= m ; j++){
                ll take = 0 , ntake = 0;
                if(s[i-1]==t[j-1]){
                    take = prev[j-1] + prev[j];
                }
                else ntake = prev[j];
                
                curr[j] = ntake + take;
            }
            
            prev = curr;
        }
        
        return (int)prev[m];
    }
};
