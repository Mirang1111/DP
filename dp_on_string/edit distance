class Solution {
public:
    
    int solve(string a , string b , int i , int j , vector<vector<int>> &dp){
        // since a is exhausted and we need to add to a
        if(i < 0 ) return j+1;
        // since b is exhausted and we need to remove from a 
        if(j < 0) return i+1;
        if(dp[i][j]!=-1) return dp[i][j];
        int matched = INT_MAX;
        int not_matched = INT_MAX;
        
        if(a[i]==b[j]){
            matched = solve(a,b,i-1,j-1,dp) + 0;
        }
        else{
            
            not_matched = 1 + min({solve(a,b,i,j-1,dp) , solve(a,b,i-1,j-1,dp) , solve(a,b,i-1,j,dp)});
        }
        
        return dp[i][j] = min(matched,not_matched);
    }
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
      //vector<vector<int>> dp(n , vector<int> (m , -1));
      //return solve(word1,word2,n-1,m-1,dp);
        
       /* vector<vector<int>> dp(n+1 , vector<int> (m+1,0));
        for(int j = 0 ; j <= m ; j++) dp[0][j] = j;
        for(int i = 0 ; i <= n ; i++) dp[i][0] = i;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m; j++){
              int matched = INT_MAX;
              int not_matched = INT_MAX;
                
        if(word1[i-1]==word2[j-1]){
            matched = dp[i-1][j-1] + 0;
        }
        else{
            
            not_matched = 1 + min({dp[i][j-1] , dp[i-1][j-1] , dp[i-1][j]});
        }
                dp[i][j] = min(matched,not_matched);
                
            }
        }
        
        return dp[n][m];*/
        vector<int> prev(m+1,0);

        
        for(int j = 0 ; j <= m ; j++) prev[j] = j;
        for(int i = 1 ; i <= n ; i++){
        vector<int> curr(m+1,0);
            curr[0] = i; // this is the most imp line
            for(int j = 1 ; j <= m; j++){
              int matched = INT_MAX;
              int not_matched = INT_MAX;
                
        if(word1[i-1]==word2[j-1]){
            matched = prev[j-1] + 0;
        }
        else{
            
            not_matched = 1 + min({curr[j-1] , prev[j-1] , prev[j]});
        }
                curr[j] = min(matched,not_matched);
            }
            
            prev = curr;
        }
        
        return prev[m];
        
    }
};
