/*

recursion tc-2 power (m+n)
          sc- o(n+m)
          
memo      tc - o(n*m)
          sc - o(n*m) + o(n+m) -> auxiliary stack space
          
tabu      tc - o(n*m)   
          sc - o(n*m)
          
space     tc - o(n*m)
          sc - o(m)
*/


class Solution {
public:
    
    int solve(string a , string b , int i , int j , vector<vector<int>> &dp){
        
        
        if(i < 0 or j < 0 ) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int take = 0;
        int not_take = 0;
        if(a[i]==b[j]){
            take = 1 + solve(a,b,i-1,j-1,dp);
        }
        else{
            not_take = max(solve(a,b,i-1,j,dp) , solve(a,b,i,j-1,dp));
        }
        
        return dp[i][j] =  max(take,not_take);
    }
    
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        //vector<vector<int>> dp(n+1 , vector<int> (m+1,-1));
      //  return solve(text1,text2,n-1,m-1,dp);
        
     /*   vector<vector<int>> dp(n+1 , vector<int> (m+1,-1));
        for(int i = 0 ; i <= n ; i++) dp[i][0] = 0;
        for(int j = 0 ; j <= m ; j++) dp[0][j] = 0;
        
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                int take = 0 , not_take = 0;
                if(text1[i-1]==text2[j-1]){
                    take = 1 + dp[i-1][j-1];
                }
                else not_take = max(dp[i-1][j] , dp[i][j-1]);
                
                dp[i][j] = max(not_take , take);
            }
        }
        
        return dp[n][m]; */
        vector<int> prev(m+1,0);
        for(int i = 0 ; i <= n ; i++) prev[0] = 0;
        for(int j = 0 ; j <= m ; j++) prev[j] = 0;
         for(int i = 1 ; i <= n ; i++){
                vector<int> curr(m+1,0);
            for(int j = 1 ; j <= m ; j++){
                int take = 0 , not_take = 0;
                if(text1[i-1]==text2[j-1]){
                    take = 1 + prev[j-1];
                }
                else not_take = max(prev[j] , curr[j-1]);
                
                curr[j] = max(not_take , take);
            }
             prev = curr;
        }
        return prev[m];
        
    }
};
