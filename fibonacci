/* memo
tc -> o(N) -> it is always the number of max states in memo() function
 sc -> o(N) -> recursive stack space + o(N) -> dp vector
*/
/* tabu 
tc -> o(N) and sc -> o(N) only no recursion stack space is used here
*/

/* space o
tc -> o(N) 
sc -> o(1)
*/

class Solution {
public:
    int memo(int n , vector<int> &dp){
        if(n==1 or n==0) return n;
        if(dp[n]!=-1) return dp[n];
        return dp[n] =  memo(n-1,dp) + memo(n-2,dp);
    }
    int fib(int n) {
        
        return recur(n);
         vector<int> dp(n+1,0);
        return memo(n,dp); 
         bottom up -> tabulation (reverse the parameters sent during the recursion)
        if(n==0 or n==1) return n;
        copy the base case of recursion
        dp[0] = 0;
        dp[1] = 1;
        // in recursion from n to 2 , here do from 2 to n (opposite exactly)
        for(int i = 2 ; i <= n; i++) dp[i] = dp[i-1] + dp[i-2];
        return dp[n]; 
        int prev2 = 0 , prev1 = 1;
        int cur;
        for(int i = 2 ; i <= n ; i++){
            cur = prev1 + prev2;
            prev2 = prev1;
            prev1 = cur;
        }
       //  can also return cur
        return prev1;
    }
};
